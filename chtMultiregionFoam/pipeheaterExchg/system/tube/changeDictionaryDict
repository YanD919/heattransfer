/*--------------------------------*- C++ -*----------------------------------*\
| =========                 |                                                 |
| \\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox           |
|  \\    /   O peration     | Version:  v2312                                 |
|   \\  /    A nd           | Website:  www.openfoam.com                      |
|    \\/     M anipulation  |                                                 |
\*---------------------------------------------------------------------------*/
FoamFile
{
    version     2.0;
    format      ascii;
    class       dictionary;
    object      changeDictionaryDict;
}
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

boundary
{
}

U
{
    internalField   uniform (0 0 0);

    boundaryField
    {
	tube_to_copper
        {
            type            noSlip;
        }    
	tubeend2
	{
	    type            flowRateInletVelocity;
	    volumetricFlowRate constant 2.2e-4;
	    extrapolateProfile false;
	    value           $internalField;
	}
        tubeend1
        {
            type            zeroGradient;
        }	
        "procBoundary.*"
        {
            type            processor;
        }
    }
}

T
{
    internalField   uniform 300;

    boundaryField
    {
        ".*"
        {
            type            compressible::turbulentTemperatureCoupledBaffleMixed;
            Tnbr            T;
            kappaMethod     fluidThermo;
            value           uniform 300;
        }
        tubeend2
        {
            type            fixedValue;
            value           uniform 500;
        }
        tubeend1
        {
            type            zeroGradient;
        }
	"procBoundary.*"
        {
            type            processor;
        }
    }
}

epsilon
{
    // Set the value on all bc to non-zero. Not used in simulation
    // since zeroGradient; only used in initialisation.
    internalField   uniform 0.01;

    boundaryField
    {
        tube_to_copper
        {
            type            epsilonWallFunction;
            value           uniform 0.01;
        }
	"(tubeend2|tubeend1)"
        {
            type            calculated;
            value           $internalField;
        }
        "procBoundary.*"
        {
            type            processor;
        }
    }
}

k
{
    internalField   uniform 0.1;

    boundaryField
    {
        tube_to_copper
        {
            type            kqRWallFunction;
            value           uniform 0.1;
        }
        tubeend2
        {
            type            turbulentIntensityKineticEnergyInlet;
	    intensity       0.05;
            value           $internalField;
	    // turbulent intensity can be estimated:
	    // https://www.simscale.com/docs/simulation-setup/global-settings/k-epsilon/
	    // Intensity = 0.16 * Re ^(-1/8)
	    // Re = Reynold's number based on hydraulic mean diameter
        }
	tubeend1
        {
            type            inletOutlet;
            inletValue      $internalField;
            value           $internalField;
        }
        "procBoundary.*"
        {
            type            processor;
        }
    }
}

p_rgh
{
    internalField   uniform 1e5;

    boundaryField
    {
        tube_to_copper
        {
            type            fixedFluxPressure;
            value           uniform 1e5;
        }
        tubeend2
        {
            type            fixedFluxPressure;
            value           $internalField;
        }
        tubeend1
        {
            type            fixedValue;
            value           uniform 1e5;
        }
        "procBoundary.*"
        {
            type            processor;
        }
    }
}

p
{
    internalField   uniform 1e5;

    boundaryField
    {
        tube_to_copper
        {
            type            calculated;
            value           uniform 1e5;
        }
        "procBoundary.*"
        {
            type            processor;
        }
    }
}

rho
{
    internalField   uniform 1000;

    boundaryField
    {
        tube_to_copper
        {
            type            calculated;
            value           uniform 1000;
        }
        "procBoundary.*"
        {
            type            processor;
        }
    }
}

omega
{
    internalField   uniform 0.2;

    boundaryField
    {
        tube_to_copper
        {
            type            omegaWallFunction;
            value           uniform 0.2;
        }
        tubeend2
        {
            type            turbulentMixingLengthFrequencyInlet;
            mixingLength    0.007;
	    // mixing length estimated here : https://www.simscale.com/docs/simulation-setup/global-settings/k-epsilon/
	    // mixing length = hydraulic dimater = 0.07
            value           $internalField;
        }
        tubeend1
        {
            type            inletOutlet;
            inletValue      $internalField;
            value           $internalField;
        }
        "procBoundary.*"
        {
            type            processor;
        }
    }
}

alphat
{
    internalField   uniform 0;

    boundaryField
    {
	tube_to_copper
        {
            type            compressible::alphatWallFunction;
	    Prt             0.85;
            value           uniform 0;
        }
	"(tubeend2|tubeend1)"
        {
            type            calculated;
            value           $internalField;
        }
        "procBoundary.*"
        {
            type            processor;
        }
    }
}

nut
{
    internalField   uniform 0;

    boundaryField
    {
        tube_to_copper
        {
            type            nutUWallFunction;
            value           uniform 0;
        }
	"(tubeend2|tubeend1)"
        {
            type            calculated;
            value           $internalField;
        }
        "procBoundary.*"
        {
            type            processor;
        }
    }
}

// ************************************************************************* //
